// universal.min.js - Fixed webhook detection
(function() {
    console.log('üöÄ Universal script starting...');
    
    // Get webhook URL - check multiple ways
    var WEBHOOK_URL = null;
    
    // Method 1: Look for data-webhook on any script
    var scripts = document.querySelectorAll('script[data-webhook]');
    console.log('üìã Scripts with data-webhook found:', scripts.length);
    
    if (scripts.length > 0) {
        WEBHOOK_URL = scripts[scripts.length - 1].getAttribute('data-webhook');
        console.log('‚úÖ Found webhook via data-webhook attribute:', WEBHOOK_URL);
    }
    
    // Method 2: Check if this script has the attribute (added by loader)
    if (!WEBHOOK_URL) {
        var allScripts = document.getElementsByTagName('script');
        for (var i = allScripts.length - 1; i >= 0; i--) {
            var script = allScripts[i];
            if (script.src && script.src.includes('universal.min.js')) {
                var webhook = script.getAttribute('data-webhook');
                if (webhook) {
                    WEBHOOK_URL = webhook;
                    console.log('‚úÖ Found webhook on universal script:', WEBHOOK_URL);
                    break;
                }
            }
        }
    }
    
    // Method 3: Fallback to default
    if (!WEBHOOK_URL) {
        WEBHOOK_URL = 'https://n8n.wynnatlove.com/webhook/ff7d39ac-2ac9-4ba3-a6a8-fabc159c44c1';
        console.log('‚ö†Ô∏è Using fallback webhook URL:', WEBHOOK_URL);
    }
    
    console.log('üéØ Final webhook URL:', WEBHOOK_URL);
    
    var processedSubmissions = new Set();
    
    // Browser-compatible closest() polyfill
    function findClosest(element, selector) {
        if (element.closest) {
            return element.closest(selector);
        }
        
        var current = element;
        while (current && current !== document) {
            if (current.matches && current.matches(selector)) {
                return current;
            }
            if (current.tagName && selector.includes(current.tagName.toLowerCase())) {
                return current;
            }
            if (current.className && selector.includes('modal') && current.className.toLowerCase().includes('modal')) {
                return current;
            }
            if (current.className && selector.includes('popup') && current.className.toLowerCase().includes('popup')) {
                return current;
            }
            current = current.parentElement;
        }
        return null;
    }
    
    function getAdTrackingParams() {
        var params = {};
        var urlParams = new URLSearchParams(window.location.search);
        
        // Google Ads tracking
        var googleParams = ['gclid', 'gclsrc', 'gbraid', 'wbraid', 'dclid'];
        googleParams.forEach(function(param) {
            var value = urlParams.get(param);
            if (value) params[param] = value;
        });
        
        // Facebook/Meta tracking
        var fbParams = ['fbclid', 'fbadid', 'fb_action_ids', 'fb_action_types', 'fb_source'];
        fbParams.forEach(function(param) {
            var value = urlParams.get(param);
            if (value) params[param] = value;
        });
        
        // UTM parameters
        var utmParams = ['utm_source', 'utm_medium', 'utm_campaign', 'utm_term', 'utm_content', 'utm_id'];
        utmParams.forEach(function(param) {
            var value = urlParams.get(param);
            if (value) params[param] = value;
        });
        
        // Other major platforms
        var otherParams = [
            'ttclid', 'tt_medium', 'tt_content', // TikTok
            'ScCid', 'snapchat_click_id', // Snapchat
            'epik', 'pinterest_ct', // Pinterest
            'li_fat_id', 'linkedin_click_id', // LinkedIn
            'twclid', 'twitter_click_id', // Twitter
            'msclkid', 'ms_click_id', // Microsoft/Bing
            'affiliate_id', 'aff_id', 'ref', 'source', 'campaign', 'ad_id'
        ];
        otherParams.forEach(function(param) {
            var value = urlParams.get(param);
            if (value) params[param] = value;
        });
        
        return params;
    }
    
    function captureFormData(container) {
        console.log('üìã captureFormData called with container:', container);
        var data = {};
        var searchContainer = container || document;
        var inputs = searchContainer.querySelectorAll('input, select, textarea');
        
        console.log('üîç Found inputs:', inputs.length);
        
        inputs.forEach(function(input, index) {
            console.log('Input ' + index + ':', {
                name: input.name,
                id: input.id,
                type: input.type,
                value: input.value,
                disabled: input.disabled
            });
            
            if (input.value && input.value.trim() !== '' && !input.disabled) {
                var key = input.name || input.id || input.type || 'field';
                
                if (input.type === 'checkbox' || input.type === 'radio') {
                    if (input.checked) {
                        data[key] = input.value || 'checked';
                        console.log('‚úÖ Captured checkbox/radio:', key, data[key]);
                    }
                } else if (input.tagName === 'SELECT') {
                    var selectedOption = input.options[input.selectedIndex];
                    if (selectedOption && selectedOption.value) {
                        data[key] = selectedOption.value;
                        console.log('‚úÖ Captured select:', key, data[key]);
                    }
                } else if (input.type !== 'submit' && input.type !== 'button') {
                    data[key] = input.value;
                    console.log('‚úÖ Captured input:', key, data[key]);
                }
            } else {
                console.log('‚ö†Ô∏è Skipped input (no value or disabled)');
            }
        });
        
        // Add ad tracking parameters
        var adTracking = getAdTrackingParams();
        if (Object.keys(adTracking).length > 0) {
            data._tracking = adTracking;
            console.log('üìä Added tracking params:', adTracking);
        }
        
        // Add basic metadata
        data._meta = {
            page_url: location.href,
            timestamp: Date.now()
        };
        
        console.log('üì¶ Final captured data:', data);
        return data;
    }
    
    function findRelevantContainer(element) {
        console.log('üéØ findRelevantContainer called with:', element);
        var container = findClosest(element, 'form');
        if (container) {
            console.log('‚úÖ Found form container');
            return container;
        }
        
        var parent = element.parentElement;
        while (parent && parent !== document.body) {
            var inputsInParent = parent.querySelectorAll('input, select, textarea');
            if (inputsInParent.length > 0) {
                console.log('‚úÖ Found parent container with inputs');
                return parent;
            }
            parent = parent.parentElement;
        }
        
        console.log('‚ö†Ô∏è Using document as fallback');
        return document;
    }
    
    function sendToWebhook(data, context) {
        console.log('üì° sendToWebhook called with context:', context);
        console.log('üì° Data to send:', data);
        
        if (!data || Object.keys(data).length === 0) {
            console.log('‚ùå No data to send');
            return false;
        }
        
        // Create unique submission identifier
        var formData = {};
        var hasActualFormData = false;
        
        Object.keys(data).forEach(function(key) {
            if (key !== '_tracking' && key !== '_meta') {
                formData[key] = data[key];
                hasActualFormData = true;
            }
        });
        
        console.log('üîç Form data (excluding meta):', formData);
        console.log('üîç Has actual form data:', hasActualFormData);
        
        if (!hasActualFormData) {
            console.log('‚ùå No actual form data - only metadata. Skipping webhook.');
            return false;
        }
        
        var submissionId = JSON.stringify(formData) + location.href;
        var now = Date.now();
        var recentSubmissionKey = submissionId + '_recent';
        var lastSubmissionTime = window[recentSubmissionKey] || 0;
        
        console.log('üîë Submission ID:', submissionId);
        console.log('‚è∞ Last submission time:', lastSubmissionTime);
        console.log('‚è∞ Current time:', now);
        console.log('‚è∞ Time difference:', now - lastSubmissionTime);
        
        if (processedSubmissions.has(submissionId) || (now - lastSubmissionTime < 5000)) {
            console.log('üö´ DUPLICATE BLOCKED');
            return false;
        }
        
        processedSubmissions.add(submissionId);
        window[recentSubmissionKey] = now;
        
        var payload = {
            d: data,
            u: location.href,
            t: Date.now(),
            context: context
        };
        
        console.log('üöÄ Sending payload to webhook:', WEBHOOK_URL);
        console.log('üöÄ Payload:', payload);
        
        if (navigator.sendBeacon) {
            console.log('üì° Using sendBeacon...');
            var result = navigator.sendBeacon(WEBHOOK_URL, JSON.stringify(payload));
            console.log('‚úÖ sendBeacon result:', result);
            return result;
        } else {
            console.log('üì° Using fetch...');
            fetch(WEBHOOK_URL, {
                method: 'POST',
                body: JSON.stringify(payload),
                headers: {'Content-Type': 'application/json'},
                keepalive: true
            }).then(function(response) {
                console.log('‚úÖ Fetch response:', response.status);
            }).catch(function(error) {
                console.log('‚ùå Fetch error:', error);
            });
            return true;
        }
    }
    
    // Handle form submissions
    document.addEventListener('submit', function(e) {
        console.log('üìã Form submit event detected:', e.target);
        var container = findRelevantContainer(e.target);
        var data = captureFormData(container);
        sendToWebhook(data, 'form_submit');
    });
    
    // Handle button clicks
    document.addEventListener('click', function(e) {
        var target = e.target;
        
        console.log('üñ±Ô∏è Click detected on:', target);
        console.log('üñ±Ô∏è Target details:', {
            tagName: target.tagName,
            type: target.type,
            textContent: target.textContent,
            className: target.className,
            id: target.id
        });
        
        var isSubmitElement = (
            target.type === 'submit' ||
            (target.tagName === 'BUTTON' && (!target.type || target.type === 'submit')) ||
            /submit|send|join|sign|register|subscribe|reserve/i.test(target.textContent || target.value)
        );
        
        console.log('üéØ Is submit element:', isSubmitElement);
        
        if (isSubmitElement) {
            console.log('‚úÖ Submit element clicked - processing...');
            var container = findRelevantContainer(target);
            var data = captureFormData(container);
            
            var hasFormFields = false;
            Object.keys(data).forEach(function(key) {
                if (key !== '_tracking' && key !== '_meta') {
                    hasFormFields = true;
                }
            });
            
            console.log('üîç Has form fields:', hasFormFields);
            
            if (hasFormFields) {
                console.log('‚úÖ Proceeding with webhook call');
                sendToWebhook(data, 'form_click');
            } else {
                console.log('‚ö†Ô∏è No form fields found - skipping webhook');
            }
        }
    });
    
    // Manual test function
    window.testLeadCapture = function() {
        console.log('üß™ Manual test function called');
        var data = captureFormData();
        return sendToWebhook(data, 'manual_test');
    };
    
    console.log('‚úÖ Universal script loaded and event listeners attached');
})();
